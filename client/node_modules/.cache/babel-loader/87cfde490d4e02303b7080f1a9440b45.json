{"ast":null,"code":"var _jsxFileName = \"D:\\\\course\\\\web programming-ric\\\\midterm_pizza\\\\client\\\\src\\\\components\\\\DiyPizza\\\\DragSource.js\";\nimport React from 'react';\nimport { DragSource } from 'react-dnd';\nimport ItemType from './ItemType';\nimport { ListGroup, Image } from 'react-bootstrap';\nconst dragImgStyle = {\n  width: '100px'\n};\n\nconst topping = ({\n  name,\n  url,\n  isDragging,\n  connectDragSource\n}) => {\n  const opacity = isDragging ? 0.4 : 1;\n  console.log(url);\n  return connectDragSource(React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(ListGroup.Item, {\n    style: Object.assign({}, {\n      opacity\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Image, {\n    src: url,\n    style: dragImgStyle,\n    rounded: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }))));\n};\n\nexport default DragSource(ItemType.TOPPING, {\n  beginDrag: props => ({\n    name: props.key,\n    url: props.url\n  }),\n\n  endDrag(props, monitor) {\n    const item = monitor.getItem();\n    const dropResult = monitor.getDropResult();\n\n    if (dropResult) {\n      alert(\"You dropped \".concat(item.name, \" into \").concat(dropResult.name, \"!\"));\n    }\n  }\n\n}, (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  isDragging: monitor.isDragging()\n}))(topping);","map":{"version":3,"sources":["D:\\course\\web programming-ric\\midterm_pizza\\client\\src\\components\\DiyPizza\\DragSource.js"],"names":["React","DragSource","ItemType","ListGroup","Image","dragImgStyle","width","topping","name","url","isDragging","connectDragSource","opacity","console","log","Object","assign","TOPPING","beginDrag","props","key","endDrag","monitor","item","getItem","dropResult","getDropResult","alert","connect","dragSource"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,iBAAjC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;;AAIA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,GAAR;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA;AAAzB,CAAD,KAAkD;AAC9D,QAAMC,OAAO,GAAGF,UAAU,GAAG,GAAH,GAAS,CAAnC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACA,SAAOE,iBAAiB,CACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD,CAAW,IAAX;AAAgB,IAAA,KAAK,EAAEI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEJ,MAAAA;AAAF,KAAlB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEH,GAAZ;AAAiB,IAAA,KAAK,EAAEJ,YAAxB;AAAsC,IAAA,OAAO,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADoB,CAAxB;AAOH,CAVD;;AAYA,eAAeJ,UAAU,CACrBC,QAAQ,CAACe,OADY,EAErB;AACEC,EAAAA,SAAS,EAAEC,KAAK,KAAK;AAAEX,IAAAA,IAAI,EAAEW,KAAK,CAACC,GAAd;AAAmBX,IAAAA,GAAG,EAAEU,KAAK,CAACV;AAA9B,GAAL,CADlB;;AAEEY,EAAAA,OAAO,CAACF,KAAD,EAAQG,OAAR,EAAiB;AACtB,UAAMC,IAAI,GAAGD,OAAO,CAACE,OAAR,EAAb;AACA,UAAMC,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;;AACA,QAAID,UAAJ,EAAgB;AACdE,MAAAA,KAAK,uBAAgBJ,IAAI,CAACf,IAArB,mBAAkCiB,UAAU,CAACjB,IAA7C,OAAL;AACD;AACF;;AARH,CAFqB,EAYrB,CAACoB,OAAD,EAAUN,OAAV,MAAuB;AACrBX,EAAAA,iBAAiB,EAAEiB,OAAO,CAACC,UAAR,EADE;AAErBnB,EAAAA,UAAU,EAAEY,OAAO,CAACZ,UAAR;AAFS,CAAvB,CAZqB,CAAV,CAgBbH,OAhBa,CAAf","sourcesContent":["import React from 'react';\r\nimport { DragSource } from 'react-dnd';\r\nimport ItemType from './ItemType';\r\nimport { ListGroup, Image } from 'react-bootstrap';\r\n\r\nconst dragImgStyle = {\r\n    width: '100px'\r\n}\r\n\r\nconst topping = ({ name, url, isDragging, connectDragSource }) => {\r\n    const opacity = isDragging ? 0.4 : 1\r\n    console.log(url);\r\n    return connectDragSource(\r\n        <div>\r\n            <ListGroup.Item style={Object.assign({}, { opacity })}>\r\n                <Image src={url} style={dragImgStyle} rounded />\r\n            </ListGroup.Item>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default DragSource(\r\n    ItemType.TOPPING,\r\n    {\r\n      beginDrag: props => ({ name: props.key, url: props.url}),\r\n      endDrag(props, monitor) {\r\n        const item = monitor.getItem()\r\n        const dropResult = monitor.getDropResult()\r\n        if (dropResult) {\r\n          alert(`You dropped ${item.name} into ${dropResult.name}!`)\r\n        }\r\n      },\r\n    },\r\n    (connect, monitor) => ({\r\n      connectDragSource: connect.dragSource(),\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n)(topping)"]},"metadata":{},"sourceType":"module"}