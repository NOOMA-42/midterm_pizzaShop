{"ast":null,"code":"var _jsxFileName = \"D:\\\\course\\\\web programming-ric\\\\midterm_pizza\\\\client\\\\src\\\\components\\\\DiyPizza\\\\DragSource.js\";\nimport React from 'react';\nimport { DragSource } from 'react-dnd';\nimport ItemType from './ItemType';\nimport { ListGroup, Image } from 'react-bootstrap';\nconst dragImgStyle = {\n  width: '100px'\n};\n\nconst topping = ({\n  name,\n  img,\n  isDragging,\n  connectDragSource\n}) => {\n  const opacity = isDragging ? 0.4 : 1;\n  return connectDragSource(React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(ListGroup.Item, {\n    style: Object.assign({}, {\n      opacity\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(Image, {\n    src: img,\n    style: dragImgStyle,\n    rounded: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }))));\n};\n\nexport default DragSource(ItemType.TOPPING, {\n  beginDrag: props => {\n    console.log(props.url);\n    return {\n      name: props.key,\n      img: img\n    };\n  },\n\n  endDrag(props, monitor) {\n    const item = monitor.getItem();\n    const dropResult = monitor.getDropResult();\n\n    if (dropResult) {\n      alert(\"You dropped \".concat(item.name, \" into \").concat(dropResult.name, \"!\"));\n    }\n  }\n\n}, (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  isDragging: monitor.isDragging()\n}))(topping);","map":{"version":3,"sources":["D:\\course\\web programming-ric\\midterm_pizza\\client\\src\\components\\DiyPizza\\DragSource.js"],"names":["React","DragSource","ItemType","ListGroup","Image","dragImgStyle","width","topping","name","img","isDragging","connectDragSource","opacity","Object","assign","TOPPING","beginDrag","props","console","log","url","key","endDrag","monitor","item","getItem","dropResult","getDropResult","alert","connect","dragSource"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,iBAAjC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;;AAIA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,GAAR;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA;AAAzB,CAAD,KAAkD;AAC9D,QAAMC,OAAO,GAAGF,UAAU,GAAG,GAAH,GAAS,CAAnC;AACA,SAAOC,iBAAiB,CACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD,CAAW,IAAX;AAAgB,IAAA,KAAK,EAAEE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAAEF,MAAAA;AAAF,KAAlB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEH,GAAZ;AAAiB,IAAA,KAAK,EAAEJ,YAAxB;AAAsC,IAAA,OAAO,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADoB,CAAxB;AAOH,CATD;;AAWA,eAAeJ,UAAU,CACrBC,QAAQ,CAACa,OADY,EAErB;AACIC,EAAAA,SAAS,EAAEC,KAAK,IAAI;AAEhBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,GAAlB;AACA,WAAO;AAAEZ,MAAAA,IAAI,EAAES,KAAK,CAACI,GAAd;AAAmBZ,MAAAA,GAAG,EAAEA;AAAxB,KAAP;AACH,GALL;;AAMIa,EAAAA,OAAO,CAACL,KAAD,EAAQM,OAAR,EAAiB;AACxB,UAAMC,IAAI,GAAGD,OAAO,CAACE,OAAR,EAAb;AACA,UAAMC,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;;AACA,QAAID,UAAJ,EAAgB;AACZE,MAAAA,KAAK,uBAAgBJ,IAAI,CAAChB,IAArB,mBAAkCkB,UAAU,CAAClB,IAA7C,OAAL;AACH;AACA;;AAZL,CAFqB,EAgBrB,CAACqB,OAAD,EAAUN,OAAV,MAAuB;AACrBZ,EAAAA,iBAAiB,EAAEkB,OAAO,CAACC,UAAR,EADE;AAErBpB,EAAAA,UAAU,EAAEa,OAAO,CAACb,UAAR;AAFS,CAAvB,CAhBqB,CAAV,CAoBbH,OApBa,CAAf","sourcesContent":["import React from 'react';\r\nimport { DragSource } from 'react-dnd';\r\nimport ItemType from './ItemType';\r\nimport { ListGroup, Image } from 'react-bootstrap';\r\n\r\nconst dragImgStyle = {\r\n    width: '100px'\r\n}\r\n\r\nconst topping = ({ name, img, isDragging, connectDragSource }) => {\r\n    const opacity = isDragging ? 0.4 : 1\r\n    return connectDragSource(\r\n        <div>\r\n            <ListGroup.Item style={Object.assign({}, { opacity })}>\r\n                <Image src={img} style={dragImgStyle} rounded />\r\n            </ListGroup.Item>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default DragSource(\r\n    ItemType.TOPPING,\r\n    {\r\n        beginDrag: props => {\r\n            \r\n            console.log(props.url);\r\n            return { name: props.key, img: img }\r\n        },\r\n        endDrag(props, monitor) {\r\n        const item = monitor.getItem()\r\n        const dropResult = monitor.getDropResult()\r\n        if (dropResult) {\r\n            alert(`You dropped ${item.name} into ${dropResult.name}!`)\r\n        }\r\n        },\r\n    },\r\n    (connect, monitor) => ({\r\n      connectDragSource: connect.dragSource(),\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n)(topping)"]},"metadata":{},"sourceType":"module"}